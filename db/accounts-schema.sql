create schema accounts;

create table accounts.subscriptions (
    subscription_id integer generated by default as identity,
    name varchar(50) not null,
    description varchar not null,
    duration int not null,
    price int not null,
    constraint price_not_negative check (price >= 0),
    constraint days_duration_positive check (duration > 0),
    constraint subscriptions_primary_key primary key (subscription_id)
);

create table accounts.roles (
    role_id integer generated by default as identity,
    name varchar not null,
    normalized_name varchar generated always as ( upper(name) ) stored,
    constraint roles_primary_key primary key (role_id)
);

create table accounts.users (
    user_id integer generated by default as identity,
    username varchar not null,
    normalized_username varchar generated always as ( upper(username) ) stored,
    email varchar not null,
    normalized_email varchar generated always as ( upper(email) ) stored,
    password_hash varchar not null,
    role_id int not null,
    concurrency_stamp text not null,
    email_confirmed bool not null,
    lockout_enabled boolean not null,
    lockout_end timestamp with time zone,
    phone_number text not null,
    security_stamp text not null,
    access_failed_count integer not null,
    two_factor_enabled boolean not null,
    phone_number_confirmed boolean not null,
    constraint users_primary_key primary key (user_id),
    constraint users_roles_role_id_foreign_key foreign key (role_id) references accounts.roles(role_id) on delete set default
);

-- For equality comparison for 'user_id' in gist
create extension btree_gist;

create table accounts.users_subscriptions (
    user_subscription_id integer generated by default as identity,
    user_id int not null,
    subscription_id int references accounts.subscriptions(subscription_id) not null,
    during daterange not null,
    constraint max_1_subscription_per_user_at_time exclude using gist(user_id with =, during with &&),
    constraint users_subscriptions_primary_key primary key (user_subscription_id),
    constraint users_subscriptions_users_user_id_foreign_key foreign key (user_id) references accounts.users(user_id) on delete cascade,
    constraint users_subscriptions_subscriptions_subscription_id_foreign_key foreign key (subscription_id) references accounts.subscriptions(subscription_id) on delete cascade
);
